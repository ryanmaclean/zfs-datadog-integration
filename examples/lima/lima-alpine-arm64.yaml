# Lima VM Configuration for Alpine Linux ARM64 with ZFS
# Esoteric: musl libc instead of glibc + ZFS + ARM64
# Optimized for Apple Silicon (M1/M2/M3)

vmType: "vz"  # Use macOS Virtualization.framework (Apple Silicon optimized)
os: "Linux"
arch: "aarch64"

images:
  # Alpine Linux 3.19 ARM64 with virt kernel
  - location: "https://dl-cdn.alpinelinux.org/alpine/v3.19/releases/aarch64/alpine-virt-3.19.0-aarch64.iso"
    arch: "aarch64"
    digest: "sha256:placeholder"

# Optimized for M-series chips
cpus: 8  # M-series has performance + efficiency cores
memory: "12GiB"  # Take advantage of unified memory
disk: "40GiB"

# Rosetta not needed - native ARM64
rosetta:
  enabled: false
  binfmt: false

# Use virtiofs for better performance on Apple Silicon
mountType: "virtiofs"

mounts:
  - location: "~"
    writable: false
  - location: "/tmp/lima"
    writable: true

# No containerd needed
containerd:
  system: false
  user: false

# Network optimized for VZ
networks:
  - vzNAT: true

provision:
  - mode: system
    script: |
      #!/bin/sh
      
      echo "=== Alpine Linux ARM64 + ZFS (musl libc) ==="
      echo "System: $(uname -a)"
      echo "Architecture: $(uname -m)"
      echo "Libc: musl (not glibc!)"
      
      # Update Alpine
      apk update
      apk upgrade
      
      # Install ZFS from edge (testing)
      echo "@testing https://dl-cdn.alpinelinux.org/alpine/edge/testing" >> /etc/apk/repositories
      apk update
      
      # Install dependencies
      apk add zfs@testing zfs-scripts@testing \
              bash curl wget git \
              linux-virt linux-firmware-none
      
      # Load ZFS module
      modprobe zfs || echo "ZFS module load failed"
      
      # Verify ZFS
      echo "=== Verifying ZFS on musl ==="
      zpool version || echo "ZFS not available"
      zfs version || echo "ZFS not available"
      
      # Create test pool
      if command -v zpool >/dev/null 2>&1; then
          mkdir -p /var/zfs
          dd if=/dev/zero of=/var/zfs/testpool.img bs=1M count=1024
          zpool create -f testpool /var/zfs/testpool.img
          zpool status
          
          # Test compression (important on musl)
          zfs set compression=lz4 testpool
          zfs create testpool/data
          
          echo "‚úì ZFS working on Alpine ARM64 (musl)!"
          echo ""
          echo "This is special:"
          echo "- musl libc (not glibc)"
          echo "- Native ARM64"
          echo "- Optimized for M-series"
          echo "- Lightweight Alpine base"
      fi
      
      # Start ZFS services
      rc-update add zfs-import boot
      rc-update add zfs-mount boot
      rc-update add zfs-zed default
      rc-service zfs-zed start

  - mode: system
    script: |
      #!/bin/sh
      
      echo "=== Apple Silicon Optimizations ==="
      
      # Check CPU features
      echo "CPU Features:"
      cat /proc/cpuinfo | grep Features || true
      
      # Check for ARM extensions
      if grep -q 'asimd' /proc/cpuinfo; then
          echo "‚úì ASIMD (ARM NEON) available"
      fi
      
      if grep -q 'crc32' /proc/cpuinfo; then
          echo "‚úì CRC32 instructions available"
      fi
      
      # M-series specific optimizations
      echo ""
      echo "=== M-series Optimizations Active ==="
      echo "‚úì Virtualization.framework (VZ) backend"
      echo "‚úì virtiofs for filesystem sharing"
      echo "‚úì Native ARM64 performance"
      echo "‚úì Unified memory architecture"
      echo "‚úì musl libc (smaller, faster)"

message: |
  üî• ESOTERIC: Alpine Linux ARM64 + ZFS + musl + M-series! üî•
  
  Special Features:
  - musl libc instead of glibc (lighter, faster)
  - Apple Virtualization.framework (VZ)
  - Optimized for M1/M2/M3 chips
  - Native ARM64 performance
  - Alpine Linux (minimal footprint)
  
  ZFS Configuration:
  - ZED path: /etc/zfs/zed.d/
  - Service: rc-service zfs-zed restart
  - OpenRC init system
  
  M-series Optimizations:
  ‚úì VZ backend (faster than QEMU)
  ‚úì virtiofs (better than 9p)
  ‚úì Native ARM64 (no emulation)
  ‚úì Unified memory (shared with host)
  
  Why This Matters:
  - musl catches glibc-specific assumptions
  - Tests true POSIX compliance
  - Lightweight (Alpine is tiny)
  - Maximum performance on M-series
  
  Access:
  limactl shell alpine-arm64
  
  This is the performance + esoteric combo! ‚ö°Ô∏è
